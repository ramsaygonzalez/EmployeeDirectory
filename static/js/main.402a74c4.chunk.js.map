{"version":3,"sources":["utils/API.js","components/employeeTableRow.js","components/employeelist.js","components/pages/Employees.js","App.js","serviceWorker.js","index.js"],"names":["getEmployees","axios","get","EmployeeTableRow","props","deleteEmployee","bind","API","this","obj","_id","then","catch","error","console","log","align","src","picture","thumbnail","name","first","last","phone","email","dob","date","Component","EmployeeList","state","employees","results","setState","data","map","res","i","key","Container","fluid","className","Table","striped","bordered","hover","DataTable","Employees","search","err","Row","Col","lg","Jumbotron","style","textAlignVertical","textAlign","Form","Control","width","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oVAEe,GACbA,aAAc,WACZ,OAAOC,IAAMC,IAAI,mD,gBCDAC,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,eAAiB,EAAKA,eAAeC,KAApB,gBAFP,E,6DAMfC,EAAIF,eAAeG,KAAKJ,MAAMK,IAAIC,KAC7BC,OAAOC,OAAM,SAACC,GACXC,QAAQC,IAAIF,Q,+BAIpB,OAEI,4BACI,wBAAIG,MAAM,UAAS,yBAAKC,IAAKT,KAAKJ,MAAMK,IAAIS,QAAQC,aACpD,wBAAIH,MAAM,UAAUR,KAAKJ,MAAMK,IAAIW,KAAKC,OACxC,wBAAIL,MAAM,UAAUR,KAAKJ,MAAMK,IAAIW,KAAKE,MACxC,wBAAIN,MAAM,UAAUR,KAAKJ,MAAMK,IAAIc,OACnC,wBAAIP,MAAM,UAAUR,KAAKJ,MAAMK,IAAIe,OACnC,wBAAIR,MAAM,UAAUR,KAAKJ,MAAMK,IAAIgB,IAAIC,W,GAtBTC,aCIzBC,E,kDAEjB,WAAYxB,GAAQ,IAAD,8BACf,cAAMA,IACDyB,MAAQ,CACTC,UAAW,IAHA,E,gEAOE,IAAD,OAChBvB,EAAIP,eACCW,MAAK,SAAAoB,GACF,EAAKC,SAAS,CACVF,UAAWC,EAAQE,KAAKF,aAG/BnB,OAAM,SAACC,GACJC,QAAQC,IAAIF,Q,kCAKpB,OAAOL,KAAKqB,MAAMC,UAAUI,KAAI,SAACC,EAAKC,GAClC,OAAO,kBAAC,EAAD,CAAkB3B,IAAK0B,EAAKE,IAAKD,S,+BAM5C,OACI,kBAACE,EAAA,EAAD,CAAWC,OAAK,GACZ,yBAAKC,UAAU,iBACX,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB,+BACI,4BACI,qCACA,0CACA,yCACA,qCACA,qCACA,qCAGR,+BACKpC,KAAKqC,oB,GA5CQlB,aCyC3BmB,E,4MA1CXjB,MAAQ,CACJkB,OAAQ,GACRjB,UAAW,GACXC,QAAS,GACTlB,MAAO,I,kEAIU,IAAD,OAChBN,EAAIP,eACCW,MAAK,SAAAoB,GAAO,OAAI,EAAKC,SAAS,CAAEF,UAAWC,EAAQE,KAAKF,aACxDnB,OAAM,SAAAoC,GAAG,OAAIlC,QAAQC,IAAIiC,Q,+BAG9B,OACI,6BACI,kBAACV,EAAA,EAAD,KACI,kBAACW,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,kBAACC,EAAA,EAAD,CAAWb,OAAK,GACZ,kBAACD,EAAA,EAAD,KACI,wBAAIe,MAAO,CAAEC,kBAAmB,SAAUC,UAAW,WAArD,uBACA,uBAAGF,MAAO,CAAEC,kBAAmB,SAAUC,UAAW,WAApD,oFAGA,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,QAAN,CAAcJ,MAAO,CAAErC,MAAO,SAAU0C,MAAO,OAASC,YAAY,gBAOxF,kBAACV,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IAAI,kBAAC,EAAD,c,GAnCbxB,aCKTiC,MANf,WACE,OAAQ,kBAAC,EAAD,OCOUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9D,MAAK,SAAA+D,GACJA,EAAaC,gBAEd/D,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM+D,c","file":"static/js/main.402a74c4.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  getEmployees: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};\r\n","import React, { Component } from 'react';\r\nimport API from \"../utils/API\";\r\n\r\nexport default class EmployeeTableRow extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.deleteEmployee = this.deleteEmployee.bind(this);\r\n    }\r\n\r\n    deleteEmployee() {\r\n        API.deleteEmployee(this.props.obj._id)\r\n            .then().catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n    render() {\r\n        return (\r\n\r\n            <tr>\r\n                <td align=\"center\"><img src={this.props.obj.picture.thumbnail}></img></td>\r\n                <td align=\"center\">{this.props.obj.name.first}</td>\r\n                <td align=\"center\">{this.props.obj.name.last}</td>\r\n                <td align=\"center\">{this.props.obj.phone}</td>\r\n                <td align=\"center\">{this.props.obj.email}</td>\r\n                <td align=\"center\">{this.props.obj.dob.date}</td>\r\n            </tr >\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Table, Container } from 'react-bootstrap';\r\nimport API from \"../utils/API\"\r\nimport EmployeeTableRow from \"./employeeTableRow\";\r\n\r\n\r\n\r\nexport default class EmployeeList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            employees: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.getEmployees()\r\n            .then(results => {\r\n                this.setState({\r\n                    employees: results.data.results\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    DataTable() {\r\n        return this.state.employees.map((res, i) => {\r\n            return <EmployeeTableRow obj={res} key={i} />;\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <div className=\"table-wrapper\">\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Image</th>\r\n                                <th>First Name</th>\r\n                                <th>Last Name</th>\r\n                                <th>Phone</th>\r\n                                <th>Email</th>\r\n                                <th>DOB</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.DataTable()}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Row, Col, Container, Jumbotron, Form } from 'react-bootstrap';\r\nimport API from \"../../utils/API\"\r\nimport EmployeeList from \"../employeelist\";\r\n\r\nclass Employees extends Component {\r\n    state = {\r\n        search: \"\",\r\n        employees: [],\r\n        results: [],\r\n        error: \"\"\r\n    };\r\n\r\n    // When the component mounts, get a list of all available base breeds and update this.state.breeds\r\n    componentDidMount() {\r\n        API.getEmployees()\r\n            .then(results => this.setState({ employees: results.data.results }))\r\n            .catch(err => console.log(err));\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                        <Col lg={12}>\r\n                            <Jumbotron fluid>\r\n                                <Container>\r\n                                    <h1 style={{ textAlignVertical: \"center\", textAlign: \"center\", }}>Emplpoyee Directory</h1>\r\n                                    <p style={{ textAlignVertical: \"center\", textAlign: \"center\", }}>\r\n                                        Click on carrots to filter heading or use the search box to narrow your results.\r\n    </p>\r\n                                    <Form>\r\n                                        <Form.Control style={{ align: \"center\", width: \"30%\" }} placeholder=\"Search\" />\r\n                                    </Form>\r\n                                </Container>\r\n                            </Jumbotron>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col lg={12}><EmployeeList /></Col>\r\n                    </Row>\r\n                </Container>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Employees;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Employees from './components/pages/Employees';\r\n\r\nfunction App() {\r\n  return (<Employees />\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}